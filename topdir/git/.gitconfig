# -*- conf -*-
# vim: fdm=marker :
[include]
    path = ~/.gitauth
[init]
    defaultBranch = master
[color]
    ui = true
[color.diff]
    meta = yellow bold
    func = magenta bold
[core]
    pager  = less -RFS
    excludesfile = ~/.gitignore
    quotepath = false
[mergetool.emacs]
    cmd = emacsclient -c --eval \"(progn (flet ((yes-or-no-p (prompt) t)) (find-file \\\"$MERGED\\\")) (smerge-ediff))\"
    trustExitCode = false
[mergetool.ediff]
    cmd = emacs --eval \" (progn (defun ediff-write-merge-buffer () (let ((file ediff-merge-store-file)) (set-buffer ediff-buffer-C) (write-region (point-min) (point-max) file) (message \\\"Merge buffer saved in: %s\\\" file) (set-buffer-modified-p nil) (sit-for 1))) (setq ediff-quit-hook 'kill-emacs ediff-quit-merge-hook 'ediff-write-merge-buffer) (ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" nil \\\"$MERGED\\\"))\"
    trustExitCode = false
[mergetool.p4merge]
    cmd = "p4merge $BASE $LOCAL $REMOTE $MERGED"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false
[mergetool.mymeld]
    cmd = meld --auto-merge --output \"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\" --diff \"$LOCAL\" \"$BASE\" \"$REMOTE\"
[merge]
    tool = mymeld
    conflictstyle = diff3

[difftool.p4merge]
    cmd = "p4merge $LOCAL $REMOTE"
[difftool]
    prompt = false
[diff]
    tool = meld
[diff "lisp"]
  xfuncname = "^(\\(.*)$"
[diff "org"]
  xfuncname = "^(\\*+.*)$"

[push]
    default = simple
[rebase]
    autosquash = true

[alias]
    visual         = !gitk --all
    cd             = checkout
    ls             = status --short
    ignored        = status --short --ignored=matching
    a              = add
    ap             = add --patch
    co             = commit
    coa            = commit --amend
    com            = commit -m
    quicklog       = !git log --decorate --abbrev-commit --color --pretty=format:'%C(yellow)%h%Creset %C(bold blue)<%an>%Creset %Cgreen(%ar)%Creset %s' | head -n 30
    ql             = !git quicklog
    graph          = "!fun() { git log --graph --decorate --color --pretty=format:'%C(auto)%h%Creset %C(bold blue)<%<(10,trunc)%an>%Creset %Cgreen(%<(14,trunc)%ar)%Creset%C(auto)%d%Creset %s' \"$@\"; }; fun"
    graphmark      = "!fun() { git graph \"$@\" | ack --color --passthru `git rev-parse HEAD 2> /dev/null | sed 's/^\\(.\\{7\\}\\).*$/\\1/'` 2> /dev/null; }; fun"
    g              = !git graph
    gf             = !git graph --first-parent
    d              = diff
    ds             = diff --staged
    dw             = diff --color-words
    diffw          = diff --color-words
    rerere-enable  = !touch .git/rr-cache
    forget         = rm --cached
    rescue         = !git rev-list -g --all | xargs git graph
    rescuek        = !git rev-list -g --all | xargs gitk
    f              = "!fun() { git forest --sha \"$@\" | less -RFS; }; fun"
    ff             = merge --ff-only '@{u}'
    unmerged       = branch --no-merged
    merged         = branch --merged
    unfuck         = reset --keep '@{1}'
    pls-work-this-time = !git add -A && git commit --amend --no-edit && git push --force-with-lease

    yoink          = "!f(){ set -x; git pull --rebase --autostash origin \"${1:-master}\"; }; f"
    yeet           = "!f(){ set -x; git push --force-with-lease origin \"${1:-HEAD}\"; }; f"

    tar            = "!f(){ local NAME; NAME=$(basename $(git rev-parse --show-toplevel)); git archive --format=tar --prefix=$NAME/ HEAD | gzip > $NAME.tar.gz; echo \"Archive produced: $NAME.tar.gz\"; }; f"

    ribbon         = tag --force _ribbon origin/master
    catchup        = log --patch --reverse --topo-order _ribbon..origin/master
[advice]
    detachedHead = false
[magit]
    hideCampaign = true
